{"name":"Express-di","tagline":"Bring dependency injection to the Express","body":"express-di\r\n==========\r\n[![Build Status](https://travis-ci.org/luin/express-di.png?branch=master)](https://travis-ci.org/luin/express-di)\r\n\r\nInstallation\r\n-----\r\n    npm install --save express-di\r\n\r\nUsage\r\n-----\r\nTo get started simply `require('express-di')` before `var app = express()`, and this module will monkey-patch Express, allowing you to define \"denpendencies\" by providing the `app.factory()` method, after which you can use the \"denpendencies\" in you routes following the [Dependency Injection pattern(DI)](http://docs.angularjs.org/guide/di).\r\n\r\nExample\r\n-----\r\nIn the past, if you want to pass variables between middlewares, you have to tack on properties to `req`, which seems odd and uncontrollable(that you couldn't point out easily which middleware add what properties to `req`). For example:\r\n\r\n```javascript\r\nvar express = require('express');\r\nvar app = express();\r\n\r\nvar middleware1 = function(req, res, next) {\r\n  req.people1 = { name: \"Bob\" };\r\n  next();\r\n};\r\n\r\nvar middleware2 = function(req, res, next) {\r\n  req.people2 = { name: \"Jeff\" };\r\n  next();\r\n};\r\n\r\napp.get('/', middleware1, middleware2, function(req, res) {\r\n  res.json({\r\n    people1: req.people1,\r\n    people2: req.people2\r\n  });\r\n});\r\n\r\nrequire('http').createServer(app).listen(3008);\r\n```\r\n\r\nAfter using express-di, you can do this:\r\n\r\n```javascript\r\nvar express = require('express');\r\n// Require express-di\r\nrequire('express-di');\r\nvar app = express();\r\n\r\napp.factory('people1', function(req, res, next) {\r\n  next(null, { name: \"Bob\" });\r\n});\r\n\r\napp.factory('people2', function(req, res, next) {\r\n  next(null, { name: \"Jeff\" });\r\n});\r\n\r\napp.get('/', function(people1, people2, res) {\r\n  res.json({\r\n    people1: people1,\r\n    people2: people2\r\n  });\r\n});\r\n\r\nrequire('http').createServer(app).listen(3008);\r\n\r\n```\r\n\r\nDefine a dependency\r\n-----\r\nThe `app.factory(name, fn)` method is used to define a dependency.\r\n\r\n### Arguments\r\n\r\n* `name`: The name of the dependency.\r\n* `fn`: A function that is like a typical express middleware, takes 3 arguments, `req`, `res` and `next`, with a subtle difference that the `next` function takes 2 arguments: an error(can be null) and the value of the dependency.\r\n\r\n### Default dependencies\r\nexpress-di has defined three default dependencies: `req`, `res` and `next`, so that you can use these arguments in your router middlewares just as before.\r\n\r\n\r\nCache\r\n-----\r\nThe same dependency will be cached per request. For instance:\r\n\r\n```javascript\r\napp.factory('me', function(req, res, next) {\r\n  // This code block will only be executed once per request.\r\n  User.find(req.params.userId, next);\r\n});\r\n\r\nvar checkPermission = function(me, next) {\r\n  if (!me) {\r\n    return next(new Error('No permission.'));\r\n  }\r\n  next();\r\n};\r\n\r\napp.get('/me', checkPermission, function(me, res) {\r\n  res.json(me);\r\n});\r\n```\r\n\r\nWhere can I use DI?\r\n-----\r\nYou can use DI in your route-specific middlewares(aka `app.get()`, `app.post()`, `app.put()`...).\r\n\r\n\r\nPerformance\r\n-----\r\nThe process of DI will only be executed once at startup, so you don't need to worry about the performance.\r\n\r\n\r\nYou can test the performance using `make bench`.\r\n\r\nTest\r\n-----\r\n* `make test`\r\n* `make test-cov` will create the coverage.html showing the test-coverage of this module.\r\n\r\nArticles and Recipes\r\n-----\r\n* [Express 框架 middleware 的依赖问题与解决方案](http://zihua.li/2014/03/using-dependency-injection-to-optimise-express-middlewares/) [Chinese]\r\n\r\nLicense\r\n-----\r\nThe MIT License (MIT)\r\n\r\nCopyright (c) 2014 Zihua Li\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of\r\nthis software and associated documentation files (the \"Software\"), to deal in\r\nthe Software without restriction, including without limitation the rights to\r\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\r\nthe Software, and to permit persons to whom the Software is furnished to do so,\r\nsubject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\r\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\r\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\r\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\r\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n\r\n[![Bitdeli Badge](https://d2weczhvl823v0.cloudfront.net/luin/express-di/trend.png)](https://bitdeli.com/free \"Bitdeli Badge\")\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}